window.addEventListener('load', () => {
    (() => {
        let e = document.getElementById('playingField'),
            o = document.getElementById('activeScreen'),
            t = document.getElementById('menuGame'),
            l = document.getElementById('optionPage'),
            s = document.getElementById('bugSpecification'),
            r = document.getElementById('countlevels'),
            a = document.getElementById('GameOver'),
            i = document.getElementById('creepBug1'),
            n = document.getElementById('creepBug2'),
            c = document.getElementById('creepBug3'),
            d = document.getElementById('creepBug4'),
            f = document.getElementById('bugDead'),
            u = document.getElementById('gameWin'),
            g = document.querySelector('.button-play-in'),
            w = document.querySelector('.button-pause'),
            m = document.getElementById('buttonSound'),
            y = document.getElementById('levelTwo'),
            v = document.getElementById('levelThree'),
            h = document.getElementById('levelFour'),
            p = document.getElementById('levelFive'),
            b = document.getElementById('countDeadBugs'),
            L = document.getElementById('android'),
            F = {
                stepAndroid: 10,
                goPlay: !0,
                sound: !1,
                counterLevel: 1,
                levelOneFlag: !0,
                levelTwoFlag: !0,
                levelThreeFlag: !0,
                levelFourFlag: !0,
                levelFiveFlag: !0,
                victoryResults: null,
                creepBugs: null,
            },
            T = {},
            E = new Audio(),
            N = new Audio(),
            R = {},
            O = {},
            B = {},
            A = {},
            k = ['url("img/bg-Field.jpg")', 'url("img/bg-Field2.jpg")', 'url("img/bg-Field3.jpg")'],
            x = [
                'audio/bugOrdinary.mp3',
                'audio/bugArmored.mp3',
                'audio/bugManyFaces.mp3',
                'audio/levelUp.mp3',
                'audio/gameOver.mp3',
                'audio/gameWin.mp3',
                'audio/shot.mp3',
            ],
            I = [];
        const P = 'fas fa-bug bugOrdinary',
            C = 'fas fa-spider bugOrdinary bugArmored',
            S = 'fad fa-bug bugOrdinary bugRowDown',
            D = 'fad fa-spider bugOrdinary bugRowDown2',
            M = 'far fa-bug bugOrdinary bugManyFaces',
            Y = 'fal fa-spider-black-widow bugOrdinary bugRowUp',
            q = 'fas fa-spider-black-widow bugOrdinary bugRowUp2',
            W = 'fal fa-bug bugOrdinary bugArmoredManyFaces',
            U = 'fas fa-bug bugOrdinary bugArmored',
            j = 'fad fa-bug bugOrdinary bugRowDown bugRowDownArmored',
            G = 'fad fa-spider bugOrdinary bugRowDown2 bugRowDownArmored',
            H = 'fas fa-spider-black-widow bugOrdinary bugRowUp2 bugRowUpArmored',
            K = 'fal fa-spider-black-widow bugOrdinary bugRowUp bugRowUpArmored',
            X = 'fal fa-spider bugOrdinary bugArmored',
            z = [P, 'fas fa-spider bugOrdinary', S, D, Y],
            J = [U, C, j, G, H, K],
            Q = o => {
                let t = { a: 1, b: 0, c: 0, d: 0 };
                for (; t.a <= 5; ) {
                    let o = document.createElement('div');
                    o.setAttribute('id', 'row' + t.a),
                        (o.style.top = 20 + 50 * (t.a - 1) + 'px'),
                        (o.style.pointerEvents = 'none'),
                        e.appendChild(o),
                        t.a++;
                }
                for (; t.b <= 9; ) {
                    let e = document.createElement('i');
                    (e.classList = P),
                        (e.style.left = 240 + 50 * t.b + 'px'),
                        row1.appendChild(e),
                        row2.appendChild(e.cloneNode(!0)),
                        row3.appendChild(e.cloneNode(!0)),
                        row4.appendChild(e.cloneNode(!0)),
                        row5.appendChild(e.cloneNode(!0)),
                        (T['x' + t.b] = e.offsetLeft),
                        t.b++;
                }
                for (
                    R = Object.setPrototypeOf({}, T),
                        O = Object.setPrototypeOf({}, T),
                        B = Object.setPrototypeOf({}, T),
                        A = Object.setPrototypeOf({}, T),
                        L.style.color = 'rgb(48, 209, 88)',
                        f.style.animation = 'bugDead 3.5s linear infinite';
                    t.c <= 1;

                )
                    F.levelOneFlag ||
                        ((row1.childNodes[4 + t.c].classList = C),
                        (row2.childNodes[1 + 7 * t.c].classList = C),
                        (row3.childNodes[4 + t.c].classList = S)),
                        F.levelTwoFlag ||
                            ((row2.childNodes[1 + 7 * t.c].classList = M),
                            (row2.childNodes[4 + t.c].classList = D),
                            (row5.childNodes[1 + 7 * t.c].classList = S),
                            (row5.childNodes[4 + t.c].classList = C),
                            (row5.childNodes[5 + t.c].classList = C)),
                        F.levelThreeFlag ||
                            ((row1.childNodes[t.c].classList = C),
                            (row1.childNodes[8 + t.c].classList = C),
                            (row2.childNodes[2 + 1 * t.c].classList = C),
                            (row2.childNodes[6 + 1 * t.c].classList = C),
                            (row3.childNodes[4 + 1 * t.c].classList = C),
                            (row4.childNodes[1 + 7 * t.c].classList = M),
                            (row4.childNodes[2 + t.c].classList = C),
                            (row4.childNodes[4 + t.c].classList = M),
                            (row4.childNodes[6 + t.c].classList = C),
                            (row5.childNodes[t.c].classList = C),
                            (row5.childNodes[8 + t.c].classList = C)),
                        F.levelFourFlag ||
                            ((row5.childNodes[0 + 2 * t.c].classList = D),
                            (row5.childNodes[1 + 7 * t.c].classList = q),
                            (row5.childNodes[4 + t.c].classList = Y),
                            (row5.childNodes[3 + 3 * t.c].classList = M),
                            (row5.childNodes[7 + 2 * t.c].classList = D)),
                        t.c++;
                for (; t.d <= o; )
                    F.levelOneFlag || (row4.childNodes[2 + t.d].classList = C),
                        F.levelTwoFlag || ((row3.childNodes[t.d].classList = C), (row4.childNodes[t.d].classList = C)),
                        F.levelThreeFlag || (row5.childNodes[3 + t.c].classList = S),
                        F.levelFourFlag ||
                            ((row2.childNodes[t.d].classList = C),
                            (row3.childNodes[t.d].classList = W),
                            (row4.childNodes[t.d].classList = C)),
                        F.levelFiveFlag ||
                            ((row2.childNodes[t.d].classList = M),
                            (row3.childNodes[t.d].classList = M),
                            (row4.childNodes[t.d].classList = M),
                            (row5.childNodes[t.d].classList = W)),
                        t.d++;
                F.levelThreeFlag ||
                    ((row2.childNodes[9].classList = D),
                    (row2.childNodes[0].classList = Y),
                    (row4.childNodes[9].classList = q),
                    (row4.childNodes[0].classList = D)),
                    F.levelFourFlag || ((row1.childNodes[9].classList = q), (row1.childNodes[0].classList = Y)),
                    F.levelFiveFlag ||
                        ((row3.childNodes[2].classList = Y),
                        (row3.childNodes[7].classList = q),
                        (row4.childNodes[1].classList = q),
                        (row4.childNodes[8].classList = Y),
                        (row5.childNodes[0].classList = Y),
                        (row5.childNodes[9].classList = q));
            },
            V = (e, o) => {
                e.classList.add('fade-in'),
                    e.classList.remove('fade-out'),
                    o.classList.add('fade-out'),
                    o.classList.remove('fade-in');
            },
            Z = (e, o) => {
                e.classList.add('button-active'),
                    e.classList.remove('button-no-active'),
                    o.classList.add('button-no-active'),
                    o.classList.remove('button-active');
            },
            $ = () => {
                if (!F.goPlay && !F.sound) {
                    E.src = x[6];
                    let e = E.play();
                    null !== e &&
                        e.catch(() => {
                            E.play();
                        });
                }
            },
            _ = e => {
                if (!F.goPlay && !F.sound) {
                    N.src = e;
                    let o = N.play();
                    null !== o &&
                        o.catch(() => {
                            N.play();
                        });
                }
            },
            ee = () => {
                'fas fa-volume-up sound-on' == m.classList
                    ? (m.classList = 'fas fa-volume-slash sound-off')
                    : (m.classList = 'fas fa-volume-up sound-on'),
                    F.sound ? (F.sound = !1) : (F.sound = !0);
            },
            oe = () => {
                delay(900).then(() => {
                    (i.style.animation = 'bugCreepFive 4s linear 2s'),
                        (n.style.animation = 'bugCreepOne 7s linear'),
                        (c.style.animation = 'bugCreepThree 6.8s linear .7s'),
                        (d.style.animation = 'bugBlink 1.1s ease infinite');
                }),
                    delay(9e3).then(() => {
                        (i.style.animation = 'bugCreepSix 4s linear 1s'),
                            (n.style.animation = 'bugCreepTwo 5s linear .5s'),
                            (c.style.animation = 'bugCreepFour 3.5s linear 1s'),
                            (d.style.animation = 'bugBlink 2s ease');
                    });
            };
        document.addEventListener('click', o => {
            let r = o.target.dataset.game;
            if (r)
                switch (r) {
                    case 'play':
                        V(e, t), (e.style.backgroundImage = k[0]), (F.levelOneFlag = !1), Q(5), le();
                        break;
                    case 'option':
                        V(l, t);
                        break;
                    case 'specification':
                        V(s, t),
                            s.querySelectorAll('.bug-no-active').forEach(e => {
                                e.classList.remove('bug-no-active'), e.classList.add('bug-active');
                            });
                        break;
                    case 'backMenu':
                        V(t, l),
                            s.querySelectorAll('.bug-active').forEach(e => {
                                e.classList.remove('bug-active'), e.classList.add('bug-no-active');
                            });
                        break;
                    case 'backMenu2':
                        V(t, s);
                        break;
                    case 'playInGame':
                        (F.goPlay = !1), Z(g, w);
                        break;
                    case 'pause':
                        (F.goPlay = !0), Z(w, g);
                        break;
                    case 'sound':
                        ee();
                        break;
                    case 'levelTwo':
                        V(e, y), (e.style.backgroundImage = k[1]), (F.levelTwoFlag = !1), Q(9), le();
                        break;
                    case 'levelThree':
                        V(e, v), (F.levelThreeFlag = !1), Q(3), le();
                        break;
                    case 'levelFour':
                        V(e, h), (F.levelFourFlag = !1), Q(9), le();
                        break;
                    case 'levelFive':
                        V(e, p), (e.style.backgroundImage = k[2]), (F.levelFiveFlag = !1), Q(9), le();
                        break;
                    case 'winRestartGame':
                        (F.counterLevel = 1),
                            (F.levelOneFlag = !0),
                            (F.levelTwoFlag = !0),
                            (F.levelThreeFlag = !0),
                            (F.levelFourFlag = !0),
                            (F.levelFiveFlag = !0),
                            V(t, u);
                        break;
                    case 'restartGame':
                        (F.counterLevel = 1),
                            (F.levelOneFlag = !0),
                            (F.levelTwoFlag = !0),
                            (F.levelThreeFlag = !0),
                            (F.levelFourFlag = !0),
                            (F.levelFiveFlag = !0),
                            clearInterval(creepBugs),
                            V(t, a);
                }
        }),
            o.addEventListener('click', () => {
                te(), $();
            }),
            document.addEventListener('keydown', o => {
                if (!F.goPlay) {
                    let t = L.offsetLeft;
                    'ArrowLeft' == o.key || 'KeyA' == o.code
                        ? (o.preventDefault(),
                          (L.style.left = t - F.stepAndroid + 'px'),
                          (arrowRight.style.color = ''),
                          (arrowLeft.style.color = 'rgb(48, 209, 88)'))
                        : ('ArrowRight' != o.key && 'KeyD' != o.code) ||
                          (o.preventDefault(),
                          (L.style.left = t + F.stepAndroid + 'px'),
                          (arrowLeft.style.color = ''),
                          (arrowRight.style.color = 'rgb(48, 209, 88)')),
                        L.offsetLeft < 30 &&
                            ((L.style.left = t + F.stepAndroid - 10 + 'px'),
                            (arrowLeft.style.color = 'rgb(255, 69, 58)')),
                        e.offsetWidth < L.offsetLeft + L.offsetWidth - 60 &&
                            ((L.style.left = t - F.stepAndroid + 10 + 'px'),
                            (arrowRight.style.color = 'rgb(255, 69, 58)'));
                }
            }),
            document.addEventListener('keyup', e => {
                ('ArrowLeft' != e.key && 'KeyA' != e.code) || (e.preventDefault(), (arrowLeft.style.color = '')),
                    ('ArrowRight' != e.key && 'KeyD' != e.code) || (e.preventDefault(), (arrowRight.style.color = '')),
                    ('ArrowDown' != e.code &&
                        'ControlRight' != e.code &&
                        'ControlLeft' != e.code &&
                        'KeyS' != e.code) ||
                        (e.preventDefault(), te(), $()),
                    'Space' == e.code &&
                        (e.preventDefault(), F.goPlay ? ((F.goPlay = !1), Z(g, w)) : ((F.goPlay = !0), Z(w, g))),
                    ('ShiftRight' != e.code && 'ShiftLeft' != e.code) || (e.preventDefault(), ee());
            });
        const te = () => {
                if (!F.goPlay) {
                    let o = document.createElement('div');
                    (o.classList = 'bullet fad fa-meteor'),
                        (o.style.left = L.offsetLeft - 5 + 'px'),
                        e.append(o),
                        I.push({ bullet: o, pos: o.offsetTop, newPos: o.offsetTop });
                }
            },
            le = () => {
                F.goPlay = !1;
                const t = () => {
                        e.querySelectorAll('div').forEach(e => {
                            e.remove();
                        }),
                            (f.style.animation = '');
                    },
                    l = (e, o) => {
                        e.getBoundingClientRect(), o.getBoundingClientRect();
                        let t = e.offsetHeight / 2,
                            l = o.offsetHeight / 2;
                        if (
                            !(
                                ((e, o) =>
                                    Math.sqrt(
                                        Math.pow(Math.abs(e.left - o.left), 2) + Math.pow(Math.abs(e.top - o.top), 2)
                                    ))(s(e), s(o)) <
                                t + l
                            )
                        )
                            return !1;
                        switch (e.className) {
                            case U:
                            case C:
                            case X:
                                return (
                                    (e.style.animation = 'ascension-bug .8s linear'),
                                    _(x[1]),
                                    e.classList.remove('bugArmored'),
                                    o.remove(),
                                    !1
                                );
                            case j:
                            case G:
                                return (
                                    (e.style.animation = 'ascension-bug .8s linear'),
                                    _(x[1]),
                                    e.classList.remove('bugRowDownArmored'),
                                    o.remove(),
                                    !1
                                );
                            case K:
                            case H:
                                return (
                                    (e.style.animation = 'ascension-bug .8s linear'),
                                    _(x[1]),
                                    e.classList.remove('bugRowUpArmored'),
                                    o.remove(),
                                    !1
                                );
                            case M:
                                return (
                                    _(x[2]),
                                    (async e => {
                                        let o = document.createElement('span');
                                        (o.classList = 'far fa-bug ascensionBugMany'), e.appendChild(o);
                                        let t = 1;
                                        for (; t <= z.length; ) {
                                            ++t, await delay(300);
                                            const o = z[Math.floor(Math.random() * z.length)];
                                            e.classList = o;
                                        }
                                    })(e),
                                    o.remove(),
                                    !1
                                );
                            case W:
                                return (
                                    _(x[2]),
                                    (async e => {
                                        let o = document.createElement('span');
                                        (o.classList = 'fal fa-bug ascensionBugManyArm'), e.appendChild(o);
                                        let t = 1;
                                        for (; t <= J.length; ) {
                                            ++t, await delay(300);
                                            const o = z[Math.floor(Math.random() * J.length)];
                                            e.classList = o;
                                        }
                                    })(e),
                                    o.remove(),
                                    !1
                                );
                            case S:
                                return (c.directionRow = c.directionRow + 1), _(x[0]), e.remove(), o.remove(), !1;
                            case D:
                                return (c.directionRow = c.directionRow + 2), _(x[0]), e.remove(), o.remove(), !1;
                            case Y:
                                return (c.directionRow = c.directionRow - 1), _(x[0]), e.remove(), o.remove(), !1;
                            case q:
                                return (c.directionRow = c.directionRow - 2), _(x[0]), e.remove(), o.remove(), !1;
                            default:
                                return _(x[0]), e.remove(), o.remove(), !1;
                        }
                    },
                    s = e => {
                        let o = e.getBoundingClientRect(),
                            t = o.top + pageYOffset,
                            l = o.left + pageXOffset;
                        return { top: t + e.offsetHeight / 2, left: l + e.offsetWidth / 2 };
                    };
                let i = {
                        one: document.getElementById('row1'),
                        two: document.getElementById('row2'),
                        three: document.getElementById('row3'),
                        four: document.getElementById('row4'),
                        five: document.getElementById('row5'),
                    },
                    n = {
                        one: i.one.querySelectorAll('i'),
                        two: i.two.querySelectorAll('i'),
                        three: i.three.querySelectorAll('i'),
                        four: i.four.querySelectorAll('i'),
                        five: i.five.querySelectorAll('i'),
                    },
                    c = {
                        offsetOne: 2,
                        offsetTwo: 2,
                        offsetThree: 2,
                        offsetFour: 2,
                        offsetFive: 2,
                        offsetYrowOne: i.one.offsetTop,
                        offsetYrowTwo: i.two.offsetTop,
                        offsetYrowThree: i.three.offsetTop,
                        offsetYrowFour: i.four.offsetTop,
                        offsetYrowFive: i.five.offsetTop,
                        direction1: 1,
                        direction2: 1,
                        direction3: 1,
                        direction4: 1,
                        direction5: -1,
                        directionRow: 1,
                    };
                F.levelTwoFlag || ((c.offsetOne = 2), (c.offsetTwo = 2.4), (c.offsetThree = 2.3), (c.offsetFour = 2.8)),
                    F.levelThreeFlag ||
                        ((c.offsetOne = 3.1),
                        (c.offsetTwo = 3.2),
                        (c.offsetThree = 3.3),
                        (c.offsetFour = 3.4),
                        (c.offsetFive = 3.5)),
                    F.levelFourFlag ||
                        ((c.offsetOne = 4.1),
                        (c.offsetTwo = 4),
                        (c.offsetThree = 3),
                        (c.offsetFour = 4),
                        (c.offsetFive = 4)),
                    F.levelFiveFlag ||
                        ((c.offsetOne = 5),
                        (c.offsetTwo = 5),
                        (c.offsetThree = 5),
                        (c.offsetFour = 5),
                        (c.offsetFive = 5));
                let d = s => {
                    F.goPlay ||
                        (I.forEach(t => {
                            (t.bullet.style.bottom = t.pos - (t.newPos -= 15) + 'px'),
                                t.newPos < 0 && (t.bullet.remove(), I.shift(t)),
                                t.bullet.getBoundingClientRect().top < o.getBoundingClientRect().top - 5 &&
                                    t.bullet.remove(),
                                t.bullet.getBoundingClientRect().top < i.five.getBoundingClientRect().bottom &&
                                    e.querySelectorAll('.bugOrdinary').forEach(e => {
                                        l(e, t.bullet);
                                    });
                        }),
                        e.querySelectorAll('i').forEach((o, l) => {
                            (F.victoryResults = l),
                                o.getBoundingClientRect().top >= L.getBoundingClientRect().bottom - 70 &&
                                    ((L.style.animation = 'ascension-android 1s linear'),
                                    (L.style.color = 'rgb(28, 28, 30)'),
                                    _(x[4]),
                                    (F.goPlay = !0),
                                    t(),
                                    V(a, e),
                                    oe(),
                                    (creepBugs = setInterval(oe, 14700)));
                        }),
                        (r.innerHTML = F.counterLevel),
                        (b.innerHTML = F.victoryResults),
                        0 == F.victoryResults &&
                            (F.counterLevel++,
                            2 == F.counterLevel && (_(x[3]), V(y, e), (F.goPlay = !0), (F.levelOneFlag = !0), t()),
                            3 == F.counterLevel && (_(x[3]), V(v, e), (F.goPlay = !0), (F.levelTwoFlag = !0), t()),
                            4 == F.counterLevel && (_(x[3]), V(h, e), (F.goPlay = !0), (F.levelThreeFlag = !0), t()),
                            5 == F.counterLevel && (_(x[3]), V(p, e), (F.goPlay = !0), (F.levelFourFlag = !0), t()),
                            6 == F.counterLevel && (_(x[5]), V(u, e), (F.goPlay = !0), t())),
                        (c.offsetYrowOne += 0.1 * c.directionRow),
                        (c.offsetYrowTwo += 0.1 * c.directionRow),
                        (c.offsetYrowThree += 0.1 * c.directionRow),
                        (c.offsetYrowFour += 0.1 * c.directionRow),
                        (c.offsetYrowFive += 0.1 * c.directionRow),
                        c.offsetYrowOne < 15 && (c.directionRow = 1.5),
                        n.one.forEach((o, t) => {
                            (T['x' + t] += c.offsetOne * c.direction1),
                                e.offsetWidth <= o.offsetLeft + o.offsetWidth && (c.direction1 = -1),
                                o.offsetLeft < -1 && (c.direction1 = 1);
                        }),
                        n.two.forEach((o, t) => {
                            (R['x' + t] -= c.offsetTwo * c.direction2),
                                o.offsetLeft < -1 && (c.direction2 = -1),
                                e.offsetWidth <= o.offsetLeft + o.offsetWidth && (c.direction2 = 1);
                        }),
                        n.three.forEach((o, t) => {
                            (O['x' + t] += c.offsetThree * c.direction3),
                                e.offsetWidth <= o.offsetLeft + o.offsetWidth && (c.direction3 = -1),
                                o.offsetLeft < -1 && (c.direction3 = 1);
                        }),
                        n.four.forEach((o, t) => {
                            (B['x' + t] -= c.offsetFour * c.direction4),
                                o.offsetLeft < -1 && (c.direction4 = -1),
                                e.offsetWidth <= o.offsetLeft + o.offsetWidth && (c.direction4 = 1);
                        }),
                        n.five.forEach((o, t) => {
                            (A['x' + t] -= c.offsetFive * c.direction5),
                                e.offsetWidth <= o.offsetLeft + o.offsetWidth && (c.direction5 = 1),
                                o.offsetLeft < -1 && (c.direction5 = -1);
                        }));
                };
                window.requestAnimationFrame = e => {
                    clearTimeout(window.rafTimer), (window.rafTimer = setTimeout(e, 1e3 / (window.maxFPS || 60)));
                };
                let g,
                    w = performance.now(),
                    m = 0,
                    E = () => {
                        for (g = performance.now(), m += (g - w) / 1e3; m > 1 / 60; ) (m -= 1 / 60), d();
                        (w = g),
                            asyncEach(n.one, (e, o) => {
                                e.style.left = T['x' + o] + 'px';
                            }),
                            asyncEach(n.two, (e, o) => {
                                e.style.left = R['x' + o] + 'px';
                            }),
                            asyncEach(n.three, (e, o) => {
                                e.style.left = O['x' + o] + 'px';
                            }),
                            asyncEach(n.four, (e, o) => {
                                e.style.left = B['x' + o] + 'px';
                            }),
                            asyncEach(n.five, (e, o) => {
                                e.style.left = A['x' + o] + 'px';
                            }),
                            (i.one.style.top = c.offsetYrowOne + 'px'),
                            (i.two.style.top = c.offsetYrowTwo + 'px'),
                            (i.three.style.top = c.offsetYrowThree + 'px'),
                            (i.four.style.top = c.offsetYrowFour + 'px'),
                            (i.five.style.top = c.offsetYrowFive + 'px'),
                            requestAnimationFrame(E);
                    };
                requestAnimationFrame(E);
            };
    })();
});
